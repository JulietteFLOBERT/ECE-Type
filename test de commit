#include <allegro.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <stdio.h>

#define NUM_OPTIONS 3
#define NUM_SUBOPTIONS 3
#define MAX_ENEMIES 15
#define PLAYER_SPEED 5
#define BULLET_SPEED 10
#define ENEMY_SPEED 2
#define FIRE_COOLDOWN 15
#define SCREEN_W 640
#define SCREEN_H 480

// Structures de données
typedef struct {
    int x, y;
    int speed_x;
    int active;
    BITMAP *sprite;
} Bullet;

typedef struct {
    int x, y;
    int speed;
    int active;
    BITMAP *sprite;
    int fire_timer;
} Enemy;

typedef struct {
    int x, y;
    BITMAP *sprite;
} Player;

// Variables globales
FONT *big_font;
BITMAP *buffer;
BITMAP *background;
BITMAP *player_sprite;
BITMAP *enemy_sprite;
BITMAP *bullet_sprite;
SAMPLE *menu_sound;
SAMPLE *shoot_sound;
SAMPLE *explosion_sound;

int score = 0;
int level = 1;
int enemies_destroyed = 0;
int cooldown = 0;
int pause_selected = 0;

typedef enum {
    MENU_PRINCIPAL,
    MENU_OPTIONS,
    MENU_CONTROLES,
    MENU_GUIDE,
    JEU_EN_COURS,
    LEVEL_CLEARED,
    GAME_OVER,
    PAUSE_MENU
} MenuState;

void initialisation_allegro() {
    allegro_init();
    install_keyboard();
    install_sound(DIGI_AUTODETECT, MIDI_AUTODETECT, NULL);
    set_color_depth(24);

    if (set_gfx_mode(GFX_AUTODETECT_WINDOWED, SCREEN_W, SCREEN_H, 0, 0) != 0) {
        allegro_message("Probleme gfx mode");
        allegro_exit();
        exit(EXIT_FAILURE);
    }

    background = load_bitmap("Blueback.bmp", NULL);
     if (!background) allegro_message("Blueback.bmp manquant!");
    player_sprite = load_bitmap("vaisseau.bmp", NULL);
     if (!player_sprite) allegro_message("vaisseau.bmp manquant!");
    enemy_sprite = load_bitmap("alien.bmp", NULL);
     if (!enemy_sprite) allegro_message("alien.bmp manquant!");
    bullet_sprite = load_bitmap("tir.bmp", NULL);
     if (!bullet_sprite) allegro_message("tir.bmp manquant!");

    buffer = create_bitmap(SCREEN_W, SCREEN_H);
     if (!buffer) allegro_message("Erreur creation buffer");
    menu_sound = load_sample("menusound.wav");
     if (!menu_sound) allegro_message("menusound.wav manquant!");
    shoot_sound = load_sample("tir.wav");
     if (!shoot_sound) allegro_message("tir.wav manquant!");
    explosion_sound = load_sample("explosion.wav");
     if (!explosion_sound) allegro_message("explosion.wav manquant!");

}

// Fonctions du menu
const char *menu_options[NUM_OPTIONS] = { "Nouvelle Partie", "Options", "Quitter" };
const char *options_sous_menu[NUM_SUBOPTIONS] = { "Controles", "Guide", "Retour" };
const char *pause_options[2] = {"Rejouer", "Menu Principal" };

void afficher_controles(BITMAP *cible) {
    drawing_mode(DRAW_MODE_TRANS, NULL, 0, 0);
    set_trans_blender(0, 0, 0, 128);
    rectfill(cible, 50, 80, SCREEN_W-50, SCREEN_H-80, makecol(0, 0, 64));
    drawing_mode(DRAW_MODE_SOLID, NULL, 0, 0);

    textout_centre_ex(cible, font, "CONTROLES DU JEU", SCREEN_W/2, 100, makecol(0, 255, 0), -1);
    textout_ex(cible, font, "- Deplacement : Fleches HAUT/BAS", 100, 150, makecol(255,255,255), -1);
    textout_ex(cible, font, "- Tirer : T", 100, 180, makecol(255,255,255), -1);
    textout_ex(cible, font, "- Pause : P", 100, 210, makecol(255,255,255), -1);
    textout_centre_ex(cible, font, "[Retour via le menu Options]", SCREEN_W / 2, 300, makecol(150, 150, 150), -1);
}

void afficher_guide(BITMAP *cible) {
    drawing_mode(DRAW_MODE_TRANS, NULL, 0, 0);
    set_trans_blender(0, 0, 0, 128);
    rectfill(cible, 50, 80, SCREEN_W-50, SCREEN_H-80, makecol(0, 0, 64));
    drawing_mode(DRAW_MODE_SOLID, NULL, 0, 0);

    textout_centre_ex(cible, font, "GUIDE DU JOUEUR", SCREEN_W/2, 100, makecol(0, 200, 255), -1);
    textout_ex(cible, font, "Détruisez tous les ennemis pour passer au niveau suivant!", 100, 150, makecol(255,255,255), -1);
    textout_ex(cible, font, "Évitez les collisions avec les ennemis et leurs tirs!", 100, 180, makecol(255,255,255), -1);
     textout_ex(cible, font, "Press P for Pause", 100, 210, makecol(255,255,255), -1);
    textout_centre_ex(cible, font, "[Retour via le menu Options]", SCREEN_W / 2, 400, makecol(150, 150, 150), -1);
}
void display_pause_menu(BITMAP *buffer, int selected) {
    drawing_mode(DRAW_MODE_TRANS, NULL, 0, 0);
    set_trans_blender(0, 0, 0, 128);
    rectfill(buffer, 150, 100, SCREEN_W - 150, SCREEN_H - 100, makecol(0, 0, 64));
    drawing_mode(DRAW_MODE_SOLID, NULL, 0, 0);

    textout_centre_ex(buffer, font, "Jeu en pause", SCREEN_W / 2, 150, makecol(255, 255, 255), -1);
    for (int i = 0; i < 2; i++) {
        int color = (i == selected) ? makecol(255, 255, 0) : makecol(255, 255, 255);
        textout_centre_ex(buffer, font, pause_options[i], SCREEN_W / 2, 200 + i * 30, color, -1);
    }
}

// Fonctions du jeu
int check_collision(int x1, int y1, int x2, int y2, int size) {
    return (abs(x1 - x2) < size && abs(y1 - y2) < size);
}

void init_game(Enemy enemies[], Player *player) {
    cooldown = 0;
    score = 0;
    enemies_destroyed = 0;

    //Position du joueur à gauche
    player->x = 50;
    player->y = SCREEN_H / 2;

    for(int i = 0; i < MAX_ENEMIES; i++) {
        enemies[i].x = SCREEN_W - 50 - rand() % (SCREEN_W / 2);  // Limite le spawn à droite
        enemies[i].y = 50 + rand() % 200;
        enemies[i].speed = (rand() % 2 == 0) ? ENEMY_SPEED : -ENEMY_SPEED;
        enemies[i].active = 1;
        enemies[i].fire_timer = 30 + rand() % 150;
    }
}

void update_enemies(Enemy enemies[]) {
    for(int i = 0; i < MAX_ENEMIES; i++) {
        if(enemies[i].active) {
            enemies[i].x += enemies[i].speed;
            if(enemies[i].x < SCREEN_W/2 || enemies[i].x > SCREEN_W-32) {
                enemies[i].speed *= -1;
            }
        }
    }
}
void enemy_shoot(Enemy *enemy, Bullet *bullets, int *bullet_count) {
    if (enemy->fire_timer == 0 && rand() % 50 == 0) {  // Probabilité de tir
        // Trouver une balle inactive
              bullets = realloc(bullets, (*bullet_count + 1) * sizeof(Bullet));
              Bullet* new_bullet = &bullets[*bullet_count];
                new_bullet->x = enemy->x;
                 new_bullet->y = enemy->y +16;
                 new_bullet->speed_x =-5;

            new_bullet->active = 1;

             (*bullet_count)++;

               // Réinitialiser le timer
               enemy->fire_timer = 30 + rand() % 150;

    } else {
        enemy->fire_timer--;
    }
}


// Fonction principale du jeu
void jouer_partie(MenuState *menu_state) {
    Player player;
    player.x = 50; //Position du joueur à gauche
    player.y = SCREEN_H / 2; //Position du joueur au millieu

    Enemy enemies[MAX_ENEMIES] = {0};
   Bullet *bullets = NULL; // Plus de limite de balles
    int bullet_count = 0; // Nombre de balles actives
 Bullet *enemy_bullets = NULL; // balles ennemis
    int enemy_bullet_count = 0; // compter les balles ennemies

    init_game(enemies,&player);

    int cooldown = 0;
    int game_over = 0;
    int pause = 0;
     int pause_selected = 0;

    *menu_state = JEU_EN_COURS;

     while (!key[KEY_ESC] && *menu_state == JEU_EN_COURS && !game_over) {

        // Gestion de la pause
      if (key[KEY_P]) {
             *menu_state = PAUSE_MENU;
             pause_selected = 0;
           clear_keybuf();  // Important pour éviter de sauter d'options
            rest(200); // Petit délai pour éviter de toggler trop rapidement
         break;
     }

         if(!pause){
            // Gestion des entrées
          if (key[KEY_UP] && player.y > 0) player.y -= 5;
           if (key[KEY_DOWN] && player.y < SCREEN_H - 32) player.y += 5;
            //if (key[KEY_LEFT] && player.x > 0) player.x -= 5;
           //if (key[KEY_RIGHT] && player.x < SCREEN_W - 32) player.x += 5;

             if (key[KEY_T] && cooldown == 0) {
                 bullets = realloc(bullets, (bullet_count + 1) * sizeof(Bullet));
                Bullet* new_bullet = &bullets[bullet_count];

            // Initialiser la balle
             new_bullet->x = player.x+16;
            new_bullet->y = player.y+16;
             new_bullet->speed_x =10;
            new_bullet->active = 1;

            // Incrémenter le nombre de balles
            bullet_count++;
                    cooldown = FIRE_COOLDOWN;
                    play_sample(shoot_sound, 255, 128, 1000, 0);
                }

        if (cooldown > 0) cooldown--;
               // Mise à jour des balles des ennemis
          for (int i = 0; i < MAX_ENEMIES; i++) {
                 if (enemies[i].active ) {
                    if (rand() % 100 < 2){
                     enemy_shoot(&enemies[i], bullets, &bullet_count);
                }
            }
           }

           // Mettre à jour et supprimer balles joueur
             int j = 0;

        for (int i = 0; i < bullet_count; i++) {
                if (bullets[i].active) {
                     bullets[i].x += bullets[i].speed_x;

              if (bullets[i].x < 0 || bullets[i].x > SCREEN_W) {
                 bullets[i].active=0;
                 }
              }

            }

                int k=0;
              for(int i=0;i<bullet_count;i++){
                  if(bullets[i].active){
                      bullets[k] = bullets[i];
                       k++;
                  }


               }
           bullet_count =k;

           bullets = realloc(bullets, (bullet_count) * sizeof(Bullet));


          //Mettre a jour et supprimer les balles Ennemis


            // Mise à jour des ennemis
            update_enemies(enemies);

          // Vérification des collisions
          for (int i = 0; i < MAX_ENEMIES; i++) {
              if (enemies[i].active) {
                   // Collision avec le joueur
                if (check_collision(player.x, player.y, enemies[i].x, enemies[i].y, 32)) {
                     game_over = 1;
                       break;
                }
                  //Collisions des balles
                      for (int b = 0; b < bullet_count; b++) {
                       if(bullets[b].active && check_collision(bullets[b].x, bullets[b].y, enemies[i].x, enemies[i].y, 32)){
                           bullets[b].active = 0;
                                    enemies[i].active = 0;

                                       score += 50;
                                       if(explosion_sound) play_sample(explosion_sound, 255, 128, 1000, 0);
                                       enemies_destroyed++;
                                   break;

                      }

                   }

              }
           }
        }

        // Vider l'écran
        blit(background, buffer, 0, 0, 0, 0, SCREEN_W, SCREEN_H);

         // Dessiner le joueur
        draw_sprite(buffer, player_sprite, player.x, player.y);
          for (int i = 0; i < bullet_count; i++) {
             if (bullets[i].active) {
                 draw_sprite(buffer, bullet_sprite, bullets[i].x, bullets[i].y);
                }
           }
        //Afficher les balles ennemies

         // Dessiner les ennemis
        for (int i = 0; i < MAX_ENEMIES; i++) {
            if (enemies[i].active) {
                draw_sprite(buffer, enemy_sprite, enemies[i].x, enemies[i].y);
            }
        }

        // Afficher le score
        textprintf_ex(buffer, font, 10, 10, makecol(255, 255, 255), -1, "Score: %d", score);

         // Afficher l'état de la pause
         if (pause) {
            textout_centre_ex(buffer, font, "PAUSE", SCREEN_W / 2, SCREEN_H / 2, makecol(255, 255, 0), -1);
        }

         // Copier le buffer sur l'écran
        blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);

         // Temporisation
        rest(16);

       if (enemies_destroyed >= MAX_ENEMIES) {
            *menu_state = LEVEL_CLEARED;
            break;
        }

     }
      free(bullets);

      if (game_over) {
        *menu_state = GAME_OVER;

    }

}

void level_cleared_screen(BITMAP *buffer,MenuState *menu_state) {
     while (!key[KEY_ESC]) {
        blit(background, buffer, 0, 0, 0, 0, SCREEN_W, SCREEN_H);
        textout_centre_ex(buffer, font, "LEVEL 1 CLEARED!", SCREEN_W/2, 150, makecol(0, 255, 0), -1);
        textout_centre_ex(buffer, font, "Niveau suivant (N)", SCREEN_W/2, 200, makecol(255, 255, 255), -1);
        textout_centre_ex(buffer, font, "Menu principal (M)", SCREEN_W/2, 230, makecol(255, 255, 255), -1);
        blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);

        if (key[KEY_N]) {
            // Pass the level_clear variable by reference
            enemies_destroyed = 0;
             *menu_state = JEU_EN_COURS;
            break;
        }
        if (key[KEY_M])
         *menu_state = MENU_PRINCIPAL;
          break;

        rest(16);
    }
}

void game_over_screen(BITMAP *buffer,MenuState *menu_state) {
    drawing_mode(DRAW_MODE_TRANS, NULL, 0, 0);
    set_trans_blender(0, 0, 0, 128);
    rectfill(buffer, 100, 100, SCREEN_W-100, SCREEN_H-100, makecol(64, 0, 0));
    drawing_mode(DRAW_MODE_SOLID, NULL, 0, 0);

    textout_centre_ex(buffer, font, "GAME OVER!", SCREEN_W/2, 150, makecol(255, 0, 0), -1);
    textout_centre_ex(buffer, font, "Retry (R)", SCREEN_W/2, 200, makecol(255, 255, 255), -1);
    textout_centre_ex(buffer, font, "Menu principal (M)", SCREEN_W/2, 230, makecol(255, 255, 255), -1);
     while (!key[KEY_ESC]) {
         blit(background, buffer, 0, 0, 0, 0, SCREEN_W, SCREEN_H);

             //Copie le message dans le buffer
        textout_centre_ex(buffer, font, "GAME OVER!", SCREEN_W/2, 150, makecol(255, 0, 0), -1);
         textout_centre_ex(buffer, font, "Retry (R)", SCREEN_W/2, 200, makecol(255, 255, 255), -1);
         textout_centre_ex(buffer, font, "Menu principal (M)", SCREEN_W/2, 230, makecol(255, 255, 255), -1);
          blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);
              rest(16);
            if (key[KEY_R]) {
             *menu_state = JEU_EN_COURS;
                break;
            }
             if (key[KEY_M]){
                 *menu_state = MENU_PRINCIPAL;
                   break;
             }
      }
}

int main() {
    initialisation_allegro();
     big_font = load_font("big_fontp.ttf", NULL, NULL);
    if(!big_font) big_font = font;
    srand(time(NULL));

    MenuState current_state = MENU_PRINCIPAL;
    int selected = 0;
    int key_pressed;
    Player player;
     player.x = 50;
     player.y = SCREEN_H - 50;
    Enemy enemies[MAX_ENEMIES];
   // Bullet bullets[MAX_BULLETS];
  init_game(enemies,&player);
       int bullet_count = 0;
         Bullet *bullets = NULL;

    while(!key[KEY_ESC]) {
        blit(background, buffer, 0, 0, 0, 0, SCREEN_W, SCREEN_H);
        textout_centre_ex(buffer, big_font, "GALAXIA CLASSIC", SCREEN_W/2, 50, makecol(255, 0, 0), -1);

        switch(current_state) {
            case MENU_PRINCIPAL:
                for(int i = 0; i < NUM_OPTIONS; i++) {
                    int color = (i == selected) ? makecol(255, 255, 0) : makecol(255, 255, 255);
                    textout_ex(buffer, font, menu_options[i], SCREEN_W/2 - 100, 150 + i*30, color, -1);
                }
                break;

             case JEU_EN_COURS:
                jouer_partie(&current_state);
                break;

               case PAUSE_MENU:
                //Affichez le menu de pause
                 display_pause_menu(buffer,pause_selected);
                break;


              case LEVEL_CLEARED:
                  level_cleared_screen(buffer,&current_state);
                        free(bullets);
                 enemies_destroyed = 0;
                 break;

                  case GAME_OVER:
                  game_over_screen(buffer,&current_state);
                       free(bullets);
                     break;
              case MENU_OPTIONS:
                    for (int i = 0; i < NUM_SUBOPTIONS; i++) {
                        int color = (i == selected) ? makecol(0, 255, 255) : makecol(200, 200, 200);
                         textout_ex(buffer, font, options_sous_menu[i], SCREEN_W / 2 - 100, 150 + i * 30, color, -1);
                     }
                     break;
               case MENU_CONTROLES:
                     afficher_controles(buffer);
                     break;

                case MENU_GUIDE:
                    afficher_guide(buffer);
                     break;


        }

        blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);

        if(keypressed()) {
            key_pressed = readkey() >> 8;

            switch(current_state) {
                case MENU_PRINCIPAL:
                    if(key_pressed == KEY_DOWN){
                         if(menu_sound) play_sample(menu_sound,255,128,1000,0);
                         selected = (selected + 1) % NUM_OPTIONS;
                    }
                     else if(key_pressed == KEY_UP){
                         if(menu_sound) play_sample(menu_sound,255,128,1000,0);
                          selected = (selected - 1 + NUM_OPTIONS) % NUM_OPTIONS;
                      }
                    else if(key_pressed == KEY_ENTER) {
                         if(menu_sound) play_sample(menu_sound,255,128,1000,0);
                        if (selected == 0){


                             current_state = JEU_EN_COURS;

                          }
                         else if (selected == 1) {
                             if(menu_sound) play_sample(menu_sound,255,128,1000,0);
                                current_state = MENU_OPTIONS;
                                selected = 0;
                             }
                           else if (selected == 2) {
                              if(menu_sound) play_sample(menu_sound,255,128,1000,0);
                              goto end_program;
                            }
                    }
                     break;

                 case LEVEL_CLEARED:
                     if (key_pressed == KEY_N){
                         if(menu_sound) play_sample(menu_sound,255,128,1000,0);

                         enemies_destroyed = 0;

                              current_state = JEU_EN_COURS;

                     }
                     else if (key_pressed == KEY_M){
                         if(menu_sound) play_sample(menu_sound,255,128,1000,0);
                         current_state = MENU_PRINCIPAL;

                     }


                       break;

                    case GAME_OVER:
                    if (key_pressed == KEY_R){
                         if(menu_sound) play_sample(menu_sound,255,128,1000,0);

                      current_state = JEU_EN_COURS;
                     init_game(enemies,&player);
                           enemies_destroyed = 0;

                     }
                   else if (key_pressed == KEY_M){
                     if(menu_sound) play_sample(menu_sound,255,128,1000,0);
                     current_state = MENU_PRINCIPAL;
                    }
                      break;
                  case MENU_OPTIONS:
                     if (key_pressed == KEY_DOWN) {
                      if (menu_sound) play_sample(menu_sound, 255, 128, 1000, 0);
                        selected = (selected + 1) % NUM_SUBOPTIONS;
                     }
                   else if (key_pressed == KEY_UP) {
                      if (menu_sound) play_sample(menu_sound, 255, 128, 1000, 0);
                       selected = (selected - 1 + NUM_SUBOPTIONS) % NUM_SUBOPTIONS;
                    } else if (key_pressed == KEY_ENTER) {
                       if (menu_sound) play_sample(menu_sound, 255, 128, 1000, 0);
                        if (selected == 0) current_state = MENU_CONTROLES;
                       else if (selected == 1) current_state = MENU_GUIDE;
                         else if (selected == 2) {
                           if (menu_sound) play_sample(menu_sound, 255, 128, 1000, 0);
                           current_state = MENU_PRINCIPAL;
                           selected = 0;
                        }
                    }
                   break;
                 case MENU_CONTROLES:
                   if (key_pressed == KEY_ENTER) {
                     if (menu_sound) play_sample(menu_sound, 255, 128, 1000, 0);
                     current_state = MENU_OPTIONS;
                        selected = 2;
                    }
                  break;
                 case MENU_GUIDE:
                   if (key_pressed == KEY_ENTER) {
                     if (menu_sound) play_sample(menu_sound, 255, 128, 1000, 0);
                    current_state = MENU_OPTIONS;
                        selected = 2;
                    }
                   break;
                         case PAUSE_MENU:
               if (key_pressed == KEY_DOWN) {
                        pause_selected = (pause_selected + 1) % 2; // 2 est le nombre d'options dans le menu pause
                    } else if (key_pressed == KEY_UP) {
                        pause_selected = (pause_selected + 1) % 2;
                    } else if (key_pressed == KEY_ENTER) {
                        if (pause_selected == 0) { // Rejouer
                             for(int i = 0; i < bullet_count; i++) {

                              }
                              bullet_count=0;
                           bullets=NULL;

                            current_state = JEU_EN_COURS;
                             init_game(enemies,&player);
                             enemies_destroyed = 0; //Réinitialisation
                        } else { // Menu principal
                            current_state = MENU_PRINCIPAL;
                            // Code pour reinitialiser le jeu ou tout nettoyer
                            bullet_count=0;
                           if( bullets != NULL){
                            free(bullets);
                            bullets = NULL;
                            }
                             init_game(enemies,&player);
                            enemies_destroyed = 0; //Réinitialisation


                        }
                    }
                break;
            }
        }

        rest(50);
    }

end_program:
    destroy_bitmap(background);
    destroy_bitmap(buffer);
    destroy_font(big_font);
    destroy_sample(menu_sound);
     allegro_exit();
        return 0;
}
END_OF_MAIN()
